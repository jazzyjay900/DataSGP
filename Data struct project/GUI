import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

// Book.java
class Book {
    String title, author, isbn;
    boolean isAvailable;
    
    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isAvailable = true;
    }
}

// Patron.java
import java.util.LinkedList;

class Patron {
    String name, libraryCardNumber;
    LinkedList<Book> checkedOutBooks;

    public Patron(String name, String libraryCardNumber) {
        this.name = name;
        this.libraryCardNumber = libraryCardNumber;
        this.checkedOutBooks = new LinkedList<>();
    }
}

// Library.java
class Library {
    LinkedList<Book> books = new LinkedList<>();
    LinkedList<Patron> patrons = new LinkedList<>();
    Stack<Book> undoCheckoutStack = new Stack<>();
    Queue<Book> checkoutQueue = new LinkedList<>();
    
    public void addBook(Book book) {
        books.add(book);
    }
    
    public void registerPatron(Patron patron) {
        patrons.add(patron);
    }
    
    public void checkoutBook(Patron patron, Book book) {
        if (book.isAvailable) {
            book.isAvailable = false;
            patron.checkedOutBooks.add(book);
            undoCheckoutStack.push(book);
            checkoutQueue.add(book);
            JOptionPane.showMessageDialog(null, patron.name + " checked out " + book.title);
        } else {
            JOptionPane.showMessageDialog(null, "Book is already checked out.");
        }
    }
    
    public void returnBook(Patron patron, Book book) {
        if (patron.checkedOutBooks.remove(book)) {
            book.isAvailable = true;
            checkoutQueue.remove(book);
            JOptionPane.showMessageDialog(null, patron.name + " returned " + book.title);
        }
    }
    
    public void undoLastCheckout() {
        if (!undoCheckoutStack.isEmpty()) {
            Book lastCheckedOut = undoCheckoutStack.pop();
            lastCheckedOut.isAvailable = true;
            JOptionPane.showMessageDialog(null, "Undo checkout: " + lastCheckedOut.title);
        }
    }
}

// PasswordManager.java
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class PasswordManager {
    private String adminPasswordHash;
    
    public PasswordManager() {
        adminPasswordHash = hashPassword("admin");
    }
    
    public String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(password.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                hexString.append(String.format("%02x", b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
    
    public boolean validatePassword(String inputPassword) {
        return hashPassword(inputPassword).equals(adminPasswordHash);
    }
}

// GUI LibrarySystem
public class LibrarySystemGUI {
    private Library library;
    private PasswordManager passwordManager;
    
    public LibrarySystemGUI() {
        library = new Library();
        passwordManager = new PasswordManager();
        createLoginGUI();
    }
    
    private void createLoginGUI() {
        JFrame frame = new JFrame("Library System Login");
        frame.setSize(300, 150);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JPanel panel = new JPanel();
        frame.add(panel);
        placeLoginComponents(panel, frame);
        
        frame.setVisible(true);
    }
    
    private void placeLoginComponents(JPanel panel, JFrame frame) {
        panel.setLayout(null);
        
        JLabel userLabel = new JLabel("Password:");
        userLabel.setBounds(10, 20, 80, 25);
        panel.add(userLabel);
        
        JPasswordField passwordField = new JPasswordField(20);
        passwordField.setBounds(100, 20, 165, 25);
        panel.add(passwordField);
        
        JButton loginButton = new JButton("Login");
        loginButton.setBounds(10, 50, 80, 25);
        panel.add(loginButton);
        
        loginButton.addActionListener(e -> {
            String inputPassword = new String(passwordField.getPassword());
            if (passwordManager.validatePassword(inputPassword)) {
                frame.dispose();
                createLibraryGUI();
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect password. Try again.");
            }
        });
    }
    
    private void createLibraryGUI() {
        JFrame frame = new JFrame("Library System");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JPanel panel = new JPanel();
        frame.add(panel);
        
        JButton addBookButton = new JButton("Add Book");
        JButton checkoutBookButton = new JButton("Checkout Book");
        JButton returnBookButton = new JButton("Return Book");
        
        panel.add(addBookButton);
        panel.add(checkoutBookButton);
        panel.add(returnBookButton);
        
        addBookButton.addActionListener(e -> addBook());
        checkoutBookButton.addActionListener(e -> checkoutBook());
        returnBookButton.addActionListener(e -> returnBook());
        
        frame.setVisible(true);
    }
    
    private void addBook() {
        String title = JOptionPane.showInputDialog("Enter Book Title:");
        String author = JOptionPane.showInputDialog("Enter Book Author:");
        String isbn = JOptionPane.showInputDialog("Enter Book ISBN:");
        library.addBook(new Book(title, author, isbn));
        JOptionPane.showMessageDialog(null, "Book Added Successfully!");
    }
    
    private void checkoutBook() {
        JOptionPane.showMessageDialog(null, "Feature to be implemented.");
    }
    
    private void returnBook() {
        JOptionPane.showMessageDialog(null, "Feature to be implemented.");
    }
    
    public static void main(String[] args) {
        new LibrarySystemGUI();
    }
}
